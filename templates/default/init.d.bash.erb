#!/bin/bash
#
# This file was generated by chef for <%= @node[:fqdn] %>
#
### BEGIN INIT INFO
# Provides: <%= @service_name %>
# Required-Start: $network $remote_fs $syslog $local_fs
# Required-Stop: $network $remote_fs $syslog $local_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: starts <%= @service_name %> by eye
### END INIT INFO

EYE_BIN=<%= @node['chef_eye']['bin'] %>
CONFIG_DIR=<%= @config_dir %>
RUN_USER=<%= @user || 'root' %>
LOG_FILE=<%= @log_file|| '/var/log/eye.log' %>
MASK=$2
RED='\033[0;31m'
GREEN='\033[0;32m'
CLEAR='\033[0m' # No Color

eye_log() {
  echo "`date`:$RUN_USER: $1 " >> $LOG_FILE
}

is_rvm() {
  if [ "$USER" = "$RUN_USER" ];
  then
    bash -l -c "type rvm | cat | head -1 | grep -q '^rvm is a function$'" > /dev/null 2>&1
  else
    su $RUN_USER -l -c "type rvm | cat | head -1 | grep -q '^rvm is a function$'" > /dev/null 2>&1
  fi
  return $?
}

execute() {
  if is_rvm;
  then
    CMD="rvm system do $EYE_BIN $1 $2"
  else
    CMD="$EYE_BIN $1 $2"
  fi

  if [ "$USER" = "$RUN_USER" ]; then
    $CMD
  else
    su $RUN_USER -l -c "$CMD"
  fi
  return $?
}

status() {
   echo "Info:"
   echo ""
   execute info $MASK
   echo ""
   if [ $1 ]; then
      echo "Xinfo:"
      echo ""
      execute xinfo
      echo ""
      echo "Config:"
      echo ""
      execute xinfo -c
   fi
}

start() {
  execute load
  reload
}

stop() {
   execute quit
}

check_all() {
  CHECK=0
  for CONFIG_FILE in `ls -1 $CONFIG_DIR`
  do
    if check $CONFIG_FILE; then
      echo -e  "Check $CONFIG_FILE [ ${GREEN}OK${CLEAR} ]"
    else
      CHECK=1
      echo -e "Check $CONFIG_FILE [ ${RED}FAIL${CLEAR} ]"
      echo "  $OUTPUT"
    fi
  done
  return $CHECK
}


check() {
    CONFIG_FILE=$(realpath "$CONFIG_DIR/$1")
    OUTPUT=$(execute check $CONFIG_FILE 2>&1)
    RESULT=$?
    return $RESULT
}

explain() {
    CONFIG_FILE=$(realpath "$CONFIG_DIR/$1")
    execute explain $CONFIG_FILE
}

reload() {
  eye_log $(execute delete all 2>&1)
  CONFIG_COUNT=$(ls -1 $CONFIG_DIR | wc -l);
  if [ $CONFIG_COUNT \> 0 ]; then
     for CONFIG_FILE in `ls -1 $CONFIG_DIR`
     do
       if check $CONFIG_FILE; then
          RES=$(execute load "$CONFIG_FILE" 2>&1)
          if [ "$?" -eq "0" ];
          then
             echo -e "Load $CONFIG_FILE  [ ${GREEN}OK${CLEAR} ]"
          else
             eye_log "$RES"
             echo -e "Load $CONFIG_FILE  [ ${RED}FAIL${CLEAR} ]"
          fi
       else
          echo -e "Check $CONFIG_FILE [ ${RED}FAIL${CLEAR} ]"
          echo -e "  $OUTPUT"
       fi
     done
  fi
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  reload)
    reload
    ;;
  status)
    status
    ;;
  full-status)
    status true
   ;;
  watch)
    execute watch $MASK
   ;;
  explain)
   if [ ! $MASK ]; then
      echo -e "${RED}CONF is required!${CLEAR}"
   else
      explain $MASK
      echo -e $OUTPUT
   fi
   ;;
  break)
    if [ ! $MASK ]; then
      echo -e "${RED}MASK is required!${CLEAR}"
    else
      execute break $MASK
    fi
   ;;
  check)
    check_all
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status|full-status|check|explain|watch|break} [MASK|CONF]"
    exit 1
    ;;
esac

